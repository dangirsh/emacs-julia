#+TITLE: Emacs Julia

#+PROPERTY: header-args :eval never-export :noweb yes :mkdirp yes :dir ~/treemax/.spacemacs.d/layers/treemax-julia/local/julia
#+PROPERTY: header-args:shell :results output verbatim drawer replace :tangle-mode (identity #o755)
#+OPTIONS: num:nil toc:nil

* What is this?

NOTE: This project is in-development not ready for production use! See the end of this document for notes on how to contribute.

Julia is designed to be [[https://docs.julialang.org/en/v1/manual/embedding/index.html%20][embeddable]]. This project uses Julia's C API to create an [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Dynamic-Modules.html][Emacs dynamic module]], thereby embedding Julia into Emacs. When loaded into a running Emacs process, the dynamic module registers new Emacs Lisp functions that (indirectly) call Julia's C API functions. To see this in action, skip to the [[*Basic verification][Basic verification]] section.

Embedding Julia in Emacs enables, among other things:

- low-overhead communication between Emacs and Julia
- writing Emacs extensions in Julia, which can themselves leverage any Julia library
- direct access to functions exposed in Julia's C API, but not to Julia code (i.e. inaccessible from the REPL)




The exposed wrappers in dynamic module are responsible for:

- converting data to/from Emacs Lisp types and Julia types
- handling errors that occur in the Julia runtime
- managing object lifetimes

In addition, this project includes several Emacs and Julia functions for things like:

- converting Julia code to an s-expression readable by Emacs Lisp
- ...

* Why?

One of Julia's primary shortcomings is the lack of good editing and debugging tools. Emacs is a powerful environment for developing and using such tools, especially for languages in the the Lisp family. By giving Emacs access to Julia's C API is a foundation for building better tools for working with Julia in Emacs.

Julia is a Lisp-1 in disguise (see [[https://docs.julialang.org/en/v1/manual/metaprogramming/index.html][Julia metaprogramming]]), but currently lacks a good

 leverage the existing lisp tools and apply them to Julia.

Here are some examples of tools that don't yet exist, but seem within reach:

- A structure editor (like [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][paredit]], [[https://github.com/Fuco1/smartparens][smartparens]], [[https://github.com/abo-abo/lispy][lispy]], etc...)
- A code auto-formatter
- An in-line macro-expander
- Better hooks for tools like [[https://github.com/magnars/expand-region.el][expand-region]]
- A [[https://github.com/timholy/Rebugger.jl][Rebugger]] mode.
- A "deparser" for converting s-expressions back to Julia code.
  - Note: Julia's femtolisp parser has a =deparse= function that's not exposed. The [[https://github.com/dzop/emacs-julia-parser/][emacs-julia-parser]] exposes =julia-deparse=, but it seems unfinished.

As a reference, the existing tools are spanned by

- [[https://github.com/JuliaEditorSupport/julia-emacs][Julia Mode]] - Syntax highlighting, ...
- [[https://github.com/tpapp/julia-repl][Juila REPL]] - Send code from a buffer to a Julia REPL controlled by Emacs.
- [[https://github.com/JuliaEditorSupport/LanguageServer.jl][LanguageServer.jl]] - Jump to definition, etc... Not yet working for Julia 1.0+.
- [[https://github.com/gregsexton/ob-ipython][ob-ipython]] / [[https://github.com/dzop/emacs-jupyter][emacs-jupyter]] - Jupyter integration (evaluation, completion, inspection)
- [[https://github.com/dzop/emacs-julia-parser/][emacs-julia-parser]] - An ambitious (in-progress) attempt to port Julia's femtolisp parser to Emacs Lisp.

* Getting Started
** Requirements

- Emacs Lisp experience. There is currently very little use of this package other than to aid in developing Emacs Lisp tools for Julia.
- Emacs 25+ that you can build from source.
- A =libjulia.so= from Julia 1.0+.
  - This is in =/usr/local/lib= if you [[https://github.com/JuliaLang/julia#source-download-and-compilation][build Julia from source]] with =prefix=/usr/local= set in the =Make.user= file.
- Perseverance. This is not (yet) a 1-click install.

*NOTE: This has only been tested on Ubuntu 16.04.5 with Emacs 27.0.5 and Julia 1.0.2*.

I suspect this works on most modern GNU/Linux systems, and that OSX can be made to work with some tweaks.

** Compile Emacs

We need to compile Emacs with module support using the =--with-modules= configure option. Additionally, we need to add the =RTLD_GLOBAL= flag to the Emacs =dlopen= call, per the [[https://docs.julialang.org/en/v1/manual/embedding/index.html#High-Level-Embedding-1][Julia embedding docs]].

*WARNING: I can't confirm the dlopen modification will not affect the loading other shared libraries!* I haven't seen issues in my configuration.

Unfortunately, adding the =dlopen= flag requires modifying the Emacs C source and recompiling. Please let me know if you know a better way to handle this.

Assuming you've cloned Emacs to =~/emacs-src=, edit =~/emacs-src/src/dynlib.c:dynlib_open= so that =RTLD_GLOBAL= is OR'd to the =dlopen= flags. Here's an example diff:

#+BEGIN_SRC shell :dir ~/emacs-src :exports both
git diff
#+END_SRC

#+RESULTS:
:RESULTS:
diff --git a/src/dynlib.c b/src/dynlib.c
index d40aa67f41..d8cdc61f69 100644
--- a/src/dynlib.c
+++ b/src/dynlib.c
@@ -269,7 +269,7 @@ dynlib_close (dynlib_handle_ptr h)
 dynlib_handle_ptr
 dynlib_open (const char *path)
 {
-  return dlopen (path, RTLD_LAZY);
+  return dlopen (path, RTLD_LAZY | RTLD_GLOBAL);
 }

 void *
:END:

Now compile emacs by running the following in =~/emacs-src=:

#+BEGIN_SRC shell
make clean   # optional, depending on your current state
./configure --with-modules
make
#+END_SRC

If the build succeeds, your new Emacs executable will be =~/emacs-src/src/emacs=. You can =make install= it as root if you'd like, but I prefer to keep a clean Emacs in my =/usr/local/bin= as a backup.

NB: You can speed up compilation significantly by using the =-j<n>= [[https://www.gnu.org/software/make/manual/html_node/Options-Summary.html][flag]] to =make= for a parallel build, but that can make error messages harder to decipher.


** Configure shared library directories

(If you installed Julia to a =/usr/local/=, you can likely skip this step.)

You need to ensure the directory containing the Julia shared library =libjulia.so= (built by default when compiling Julia) is in the list of paths =ld= searches when dynamically linking. Do this with the =ldconfig= utility or by setting =LD_LIBRARY_PATH=<julia_lib_dir>=.

NB: Emacs won't load a dynamic module more than once, so you'll have to restart Emacs to test changes like this. =make test= will spawn a fresh Emacs process for you, which is helpful in cases like this.

NB2: On Linux you can quickly find the library location by running =find / -name "\*libjulia.so\*".=

See [[http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html][this thorough document]] for information about shared libraries, =ldconfig=, and =LD_LIBRARY_PATH=.

** Install the Emacs package

1. Clone this repository into your Emacs load path.
2. Run your freshly-built Emacs in an environment aware of =libjulia.so= (see previous section).
3. Evaluate =(require 'julia)= and go through the first-load compilation steps (don't mind the =gcc= warnings).

If successful, =julia-core.so= should be compiled and loaded into your Emacs process. Your =*Messages*= buffer should contain the line:

#+BEGIN_EXAMPLE
Loading <install-dir>/julia-core.so (module)...done
#+END_EXAMPLE

** Basic verification

Verify the bindings work by trying to call one of the functions exposed by =julia-core.so= from Emacs Lisp. For example:

#+BEGIN_SRC emacs-lisp :exports both
(julia-eval "x = 42")
(julia-eval "EmacsJulia.clean_sexpr(\"1\")")
#+END_SRC

#+RESULTS:
: MethodError

Notice:

- There is no Emacs Lisp definition for =julia-eval=. It is implemented in C in =julia-core.c= and wraps =jl_eval_string= from Julia's C API.
- No Julia process is spawned for this evaluation. Instead, Julia and Emacs share a single process.
- Julia retains state between calls from Emacs Lisp.


* Development
** Re-building the shared library

You should only need to do this if you modify the C sources.

From the top-level directory of this repository, run:

#+BEGIN_SRC shell
make
#+END_SRC

#+RESULTS:
:RESULTS:
rm *.o *.so
Makefile:15: recipe for target 'clean' failed
gcc emacs-module-helpers.c julia-core.c --shared -Wall -std=gnu99 -I'/home/dan/julia/usr/include/julia' -DJULIA_ENABLE_THREADING=1 -fPIC -L'/home/dan/julia/usr/lib' -Wl,--export-dynamic -Wl,-rpath,'/home/dan/julia/usr/lib' -Wl,-rpath,'/home/dan/julia/usr/lib/julia' -ljulia -o julia-core.so
gcc emacs-module-helpers.c julia-core.c --shared -Wall -std=gnu99 -I'/home/dan/julia/usr/include/julia' -DJULIA_ENABLE_THREADING=1 -fPIC -L'/home/dan/julia/usr/lib' -Wl,--export-dynamic -Wl,-rpath,'/home/dan/julia/usr/lib' -Wl,-rpath,'/home/dan/julia/usr/lib/julia' -ljulia -o julia-core.so
./bin/emacs --module-assertions -nw -Q -batch -L . -l ert -l julia-tests.el --eval "(ert-run-tests-batch-and-exit)"
Exception from jl_eval_string: UndefVarError
Returning exception string to Emacs.
:END:

In case you need it, =make clean= wipes away the object files and shared library.

** Running the tests

Tests run in a separate Emacs process in "batch" mode (so no new Emacs frame will appear).

From the top-level directory of this repository, run:

#+BEGIN_SRC shell
make test
#+END_SRC


* Status / Development Notes
** Data Marshalling
*** Emacs -> Julia

Not started.

For now we serialize any data from Emacs into a string representations of Julia code, then just =eval= it.

e.g.

#+BEGIN_EXAMPLE emacs-lisp
(julia-within-lib-dir
             (julia-eval-blind
              (with-temp-buffer
                (insert-file-contents-literally "EmacsJulia/src/EmacsJulia.jl")
                (buffer-string))))
#+END_EXAMPLE

*** Julia -> Emacs [2/5]
- [X] integers, floats
- [X] strings
- [ ] 1d arrays
- [ ] multi-dimensional arrays
- [ ] arbitrary serialize-able objects

Maybe we can just try to serialize complex objects with =jld= (=hdf5= for Julia), then try to de-serialize on the Emacs side.

** Error handling

Very little at the moment.

We do capture exceptions thrown by Julia and return the exception type as a string to Emacs (+ emit some stdout). This is obviously brittle and needs work.

** Memory Management

Current tests are too simple for exploring this.

The only relevant code for this right now is in [[file:julia-core.c][julia-core.c]]:

#+BEGIN_EXAMPLE c
jl_value_t *val = jl_eval_string(str_arg);
...
JL_GC_PUSH1(&val);
emacs_value emacs_val = jl_to_elisp(env, val);
JL_GC_POP();
#+END_EXAMPLE

which ensures =val= isn't garbage collected by Julia while we convert it to an Emacs Lisp value.

** Concurrency

Currently, if Julia blocks, Emacs hangs. Julia is being compiled with threads enabled, so this might be avoidable.

FWIW, [[https://github.com/dzop/emacs-zmq][emacs-zmq]] spawns a slave Emacs process to handle polling channels. I hope that's not necessary here.

** Tests

...

** Benchmarks

- Round-trip speed test against Julia REPL and jupy-julia

** Development

While we're still relying on a patched Emacs, it would be nice to:

- provide a patch file for the =dlopen= tweak (one line)
- provide a container image with the patched pre-built Emacs (for testing)

** Open questions:

- Can we avoid modifying the =dlopen= call in the Emacs source?
  - This is the biggest current issue IMHO, since most users can't/won't modify their Emacs C code.
  - Maybe it can be fixed on Julia's side? Is it OK to require that flag?

- Can we build =femtolisp= as a shared library and link to it?
  - This would allow tightly interacting with the Julia's femtolisp parser, which is callable from C.
  - The Julia C API provides only top-level access to the parser (on purpose), but there are use-cases for tool development where it would be valuable.
  - This will likely require a (fork of / PR to) femtolisp, as it doesn't seem to currently build objects for use in shared libraries.
  - If the [[https://github.com/dzop/emacs-julia-parser/][emacs-julia-parser]] succeeds, this could be unnecessary.
    - However, as there is no spec for Julia's syntax, so *the femtolisp parser is the de-facto spec*!

** Open tasks

- Finish data marshalling layer
- Demo some new functionality leveraging sexprs
- Shell for inspecting Julia's state
- Async Julia eval
- Determine if we can hold on to several Julia sessions
- Determine if we can clear the state of an existing Julia session
-

* Misc
** Naming Conventions

The names for:

  - this project
  - the emacs library it exposes
  - the top-level C source file
  - the ".so" shared library

all try to follow conventions already set by other Emacs dynamic modules. You can find a list [[https://github.com/emacs-pe/emacs-modules][here]]. Please let me know if you find an inconsistency.

* Acknowledgments

- [[https://github.com/dzop/emacs-zmq][emacs-zmq]] for inspiration and great examples. The first-load automatic compilation code was taken from here (and probably other things).
- John Kitchin for his [[https://github.com/jkitchin/emacs-modules][module helpers]].
- This thorough Emacs module documentation: http://phst.github.io/emacs-modules.html
