#+TITLE: Emacs Julia

#+PROPERTY: header-args :eval never-export :noweb yes :mkdirp yes :dir ~/treemax/.spacemacs.d/layers/treemax-julia/local/libjulia
#+PROPERTY: header-args:shell :results output verbatim drawer replace :tangle-mode (identity #o755)
#+OPTIONS: num:nil toc:nil

* What is this?

NOTE: This project is in-development not ready for production use! See the end of this document for notes on how to contribute.

libjulia.el uses Julia's C API to [[https://docs.julialang.org/en/v1/manual/embedding/index.html%20][embed]] [[julialang.org][Julia]] into [[emacs.sexy][Emacs]] via [[https://github.com/tromey/emacs-ffi][emacs-ffi.]]

* Why?
** Augmenting Julia Development Tools in Emacs

Emacs is a powerful environment for building and using development tools, especially for lispy languages like Julia. This project gives Emacs Lisp direct and efficient access to Juila's runtime to aid the development of tools like:

- Debuggers
- Structure editors (like [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][paredit]], [[https://github.com/Fuco1/smartparens][smartparens]], and [[https://github.com/abo-abo/lispy][lispy]])
- Inline expression evaluation, macro-expansion, and views of lowered forms
- Auto-formatters, linters, refactoring tools

Note that Emacs already has interfaces to Julia via the [[https://github.com/tpapp/julia-repl][Julia REPL]], a [[https://github.com/JuliaEditorSupport/LanguageServer.jl][Language Server]], and [[https://github.com/dzop/emacs-jupyter][Jupyter kernels]]. However, none of them provide any of these facilities.

** Augmenting Emacs with Julia

Some Emacs extensions could benefit from being written in Elisp + Julia. This project enables this possibility.

* Getting Started
** Requirements
*** System

This has only been tested on Ubuntu 16.04.5 with Emacs 27.0.5 and Julia 1.0.2*.

I suspect this works on most modern GNU/Linux systems, and that OSX can be made to work with some tweaks.

*** Emacs

You'll need Emacs 25+ built with dynamic module support, as well as the [[https://github.com/tromey/emacs-ffi][emacs-ffi]] package installed.

Ensure that =ffi-module.so= built during the [[https://github.com/tromey/emacs-ffi][emacs-ffi]] installation is in your load path. One way to do this is by launching =emacs= like this:

#+BEGIN_SRC shell
LD_LIBRARY_PATH=<path-to-emacs-ffi-dir> emacs
#+END_SRC

See the tests in =emacs-ffi= to verify your installation.

**** Compiling Emacs with dynamic module support

TODO: Check if common distros ship Emacs with this option or not.

We need to compile Emacs with module support using the =--with-modules= configure option:

#+BEGIN_SRC shell
./configure --with-modules
make
#+END_SRC

If the build succeeds, your new Emacs executable will be =src/emacs=. Run =make install= as root to install it to your system.

NB: You can speed up compilation significantly by using the =-j<n>= [[https://www.gnu.org/software/make/manual/html_node/Options-Summary.html][flag]] to =make= for a parallel build.

*** Julia

You'll need to [[https://github.com/JuliaLang/julia#source-download-and-compilation][build Julia 1.0+]] to generate =libjulia.so=.

I've been using the following settings in the top-level =Make.user= file:

#+BEGIN_EXAMPLE
prefix=/usr/local
JULIA_THREADS := 0
#+END_EXAMPLE

There is currently an issue initializing Julia via =jl_init= unless =JULIA_THREADS= is set to 0.

* Development
** Re-building the shared library

You should only need to do this if you modify the C sources.

From the top-level directory of this repository, run:

#+BEGIN_SRC shell
make
#+END_SRC

#+RESULTS:
:RESULTS:
rm *.o *.so
Makefile:15: recipe for target 'clean' failed
gcc emacs-module-helpers.c julia-core.c --shared -Wall -std=gnu99 -I'/home/dan/julia/usr/include/julia' -DJULIA_ENABLE_THREADING=1 -fPIC -L'/home/dan/julia/usr/lib' -Wl,--export-dynamic -Wl,-rpath,'/home/dan/julia/usr/lib' -Wl,-rpath,'/home/dan/julia/usr/lib/julia' -ljulia -o julia-core.so
gcc emacs-module-helpers.c julia-core.c --shared -Wall -std=gnu99 -I'/home/dan/julia/usr/include/julia' -DJULIA_ENABLE_THREADING=1 -fPIC -L'/home/dan/julia/usr/lib' -Wl,--export-dynamic -Wl,-rpath,'/home/dan/julia/usr/lib' -Wl,-rpath,'/home/dan/julia/usr/lib/julia' -ljulia -o julia-core.so
./bin/emacs --module-assertions -nw -Q -batch -L . -l ert -l julia-tests.el --eval "(ert-run-tests-batch-and-exit)"
Exception from jl_eval_string: UndefVarError
Returning exception string to Emacs.
:END:

In case you need it, =make clean= wipes away the object files and shared library.

** Running the tests

Tests run in a separate Emacs process in "batch" mode (so no new Emacs frame will appear).

From the top-level directory of this repository, run:

#+BEGIN_SRC shell
make test
#+END_SRC

#+RESULTS:
:RESULTS:
:END:

* Status / Development Notes
** Open tasks

- Julia docs mention UInt128 and Int128 types, but there aren't box/unbox functions for them in =julia.h= near the others...
- Shell for inspecting Julia's state
- Async Julia eval
- Determine if we can hold on to several Julia sessions
- Determine if we can clear the state of an existing Julia session

** Issues

*** jl_init, jl_init__threading, and JULIA_THREADS

Currently, the only way I've found to successfully call jl_init in the shared library is to compile Julia with =JULIA_THREADS= set to 0.


** Debugging Notes
*** Compile libjulia with debugging symbols

#+BEGIN_SRC shell :dir ~/julia
make debug
#+END_SRC

*** Load debug version libjulia

#+BEGIN_SRC emacs-lisp
(module-load "/home/dan/treemax/.spacemacs.d/layers/treemax-julia/local/libjulia/libjulia-wrapper.so")
(libjulia--dlopen "/home/dan/julia/usr/lib/libjulia-debug.so")
#+END_SRC

*** Run Emacs under gdb

If using LD_LIBRARY_PATH, ensure you update it to point to include the path to =libjulia-debug.so=

#+BEGIN_SRC shell
LD_LIBRARY_PATH=... gdb --args ~/emacs-src/src/emacs
#+END_SRC

Then set a breakpoint somewhere in julia with a gdb command like:  =b /home/dan/julia/src/module.c:470=

Then the =run= gdb command to launch Emacs.

Load the debug library and do something that calls the code with the breakpoint.

Use gdb to debug.

* Upstream Bugs to Report
** Embedding Julia docs show the use of jl_get_function, but that doesn't seem to be exported:

#+BEGIN_SRC c
STATIC_INLINE jl_function_t *jl_get_function(jl_module_t *m, const char *name)
{
    return (jl_function_t*)jl_get_global(m, jl_symbol(name));
}
#+END_SRC

#+BEGIN_SRC shell :exports both
nm /usr/local/lib/libjulia.so |  grep jl_get_function
#+END_SRC

#+RESULTS:
:RESULTS:
:END:

Resorting to directly calling =jl_get_global= for now.
** Incorrect [[file:~/julia/src/julia_threads.h:://%20JULIA_ENABLE_THREADING%20is%20switched%20on%20in%20Make.inc%20if%20JULIA_THREADS%20is][comment in julia_threads.h]] regarding =JULIA_ENABLE_THREADING=.

Actually set to 1 always now in =Make.inc=

#+BEGIN_EXAMPLE make
# Enable threading with one thread
JULIA_THREADS := 1
#+END_EXAMPLE

#+BEGIN_EXAMPLE make
# Threads
ifneq ($(JULIA_THREADS), 0)
JCPPFLAGS += -DJULIA_ENABLE_THREADING -DJULIA_NUM_THREADS=$(JULIA_THREADS)
endif
#+END_EXAMPLE

Which means it's always on? Not sure how exporting jl_init ever works then:

#+BEGIN_EXAMPLE c
#ifdef JULIA_ENABLE_THREADING
// this helps turn threading compilation mismatches into linker errors
#define julia_init julia_init__threading
#define jl_init jl_init__threading
#define jl_init_with_image jl_init_with_image__threading
#endif
JL_DLLEXPORT void julia_init(JL_IMAGE_SEARCH rel);
JL_DLLEXPORT void jl_init(void);
JL_DLLEXPORT void jl_init_with_image(const char *julia_bindir,
                                     const char *image_relative_path);
#+END_EXAMPLE

Seems like the name =jl_init= will always be swapped for =julia_init__threading=, which has no definition!

Can confirm threading is enabled with:

#+BEGIN_EXAMPLE c
JL_DLLEXPORT int jl_threading_enabled(void)
{
#ifdef JULIA_ENABLE_THREADING
    return 1;
#else
    return 0;
#endif
}
#+END_EXAMPLE

#+BEGIN_EXAMPLE julia
ccall(:jl_threading_enabled, Cint, ())
#+END_EXAMPLE

* Acknowledgments

- [[https://github.com/dzop/emacs-zmq][emacs-zmq]] for the first-load automatic compilation code.
- [[http://phst.github.io/emacs-modules.html][Emacs module documentation]]
