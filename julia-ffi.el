(add-to-list 'load-path (concat default-directory "emacs-ffi"))

(require 'ffi)
(require 's)

(define-ffi-library libjulia.so "libjulia.so")

(defun julia-ffi-elisp-to-c-name (elisp-name)
  (format "%s" (s-replace "-" "_" elisp-name)))

(defmacro julia-ffi-bind (name arg-types return-type)
  "Wrapper around define-ffi-function from the ffi library."
  (message (format "Generating Julia binding for %s." name))
  `(define-ffi-function
     ,name
     ,(julia-ffi-elisp-to-c-name (symbol-name name))
     ,return-type
     ,arg-types
     libjulia.so))

;; TODO: Better datastructure / lookups
(defvar julia-ffi-primitive-type-map
  '((:julia-type "Int8"    :c-type "int8"    :elisp-type :int)
    (:julia-type "UInt8"   :c-type "uint8"   :elisp-type :int)
    (:julia-type "Int16"   :c-type "int16"   :elisp-type :int)
    (:julia-type "UInt16"  :c-type "uint16"  :elisp-type :int)
    (:julia-type "Int32"   :c-type "int32"   :elisp-type :int)
    (:julia-type "UInt32"  :c-type "uint32"  :elisp-type :int)
    (:julia-type "Int64"   :c-type "int64"   :elisp-type :int)
    (:julia-type "UInt64"  :c-type "uint64"  :elisp-type :int)
    (:julia-type "Int64"   :c-type "int64"   :elisp-type :int)
    (:julia-type "Float32" :c-type "float32" :elisp-type :float)
    (:julia-type "Float64" :c-type "float64" :elisp-type :double)))

(defun julia-ffi-primitive-julia-type-p (julia-type)
  (seq-some #'(lambda (type-plist)
                (equal
                 julia-type
                 (plist-get type-plist :julia-type)))
            julia-ffi-primitive-type-map))

(defun julia-ffi-c-type-from-julia-type (julia-type)
  (plist-get
   (seq-find
    #'(lambda (x)
        (equal julia-type (plist-get x :julia-type)))
    julia-ffi-primitive-type-map)
   :c-type))

(defun julia-ffi-get-jl-unbox-sym (c-type)
  (intern (format "jl-unbox-%s" c-type)))

(defun julia-ffi-gen-unboxers ()
  (dolist (type-entry julia-ffi-primitive-type-map)
    (pcase-let ((`(_ _ :c-type ,c-type :elisp-type ,elisp-type) type-entry))
      (eval `(julia-ffi-bind
              ,(julia-ffi-get-jl-unbox-sym c-type)
              (:pointer)
              ,elisp-type)))))

(defun julia-ffi-primitive-unbox (ptr julia-type)
  (unless (julia-ffi-primitive-julia-type-p julia-type)
    (error "Cannot unbox non-primitive type."))
  (let* ((c-type (julia-ffi-c-type-from-julia-type julia-type))
         (unbox-f (julia-ffi-get-jl-unbox-sym c-type)))
    (unless (functionp unbox-f)
      (error (format "Failed to lookup autogenerated unbox function %s." unbox-f)))
    (funcall unbox-f ptr)))


(defun julia-ffi-get-julia-type (ptr)
  (ffi-get-c-string
   (jl-typeof-str
    (with-ffi-string (c-str-ptr ptr)
      (jl-eval-string c-str-ptr)))))


(defun julia-ffi-elisp-str-from-julia (ptr)
  (ffi-get-c-string (jl-string-ptr ptr)))


(defun julia-ffi-elisp-from-julia (ptr julia-type)
  (pcase julia-type
    ((pred julia-ffi-primitive-julia-type-p)
     (julia-ffi-primitive-unbox ptr julia-type))
    ("String"
     (julia-ffi-elisp-str-from-julia ptr))
    ;; If we can't convert to an Elisp type, return as a user-ptr.
    (_ ptr)))

(defun julia-ffi-eval (julia-expr-str)
  (with-ffi-string (julia-expr-c-string julia-expr-str)
    (let* ((ret-val-ptr (jl-eval-string julia-expr-c-string))
           (julia-type (ffi-get-c-string (jl-typeof-str ret-val-ptr))))
      (julia-ffi-elisp-from-julia ret-val-ptr julia-type))))

(defun julia-ffi-init ()
  (julia-ffi-gen-unboxers)
  (julia-ffi-bind jl-string-ptr (:pointer) :pointer)
  (julia-ffi-bind jl-typeof-str (:pointer) :pointer)
  (julia-ffi-bind jl-eval-string (:pointer) :pointer))

(julia-ffi-init)

(provide 'julia-ffi)
