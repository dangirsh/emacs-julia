(require 'ffi)

(defun libjulia-under-to-hyphen (elisp-name)
  (replace-regexp-in-string (regexp-quote "-") "_" elisp-name t t))

(defmacro libjulia-bind (name arg-types return-type)
  "Wrapper around define-ffi-function from the ffi library."
  (message (format "Generating Julia binding for %s." name))
  `(define-ffi-function
     ,name
     ,(libjulia-under-to-hyphen (symbol-name name))
     ,return-type
     ,arg-types
     libjulia.so))

(defmacro libjulia-bind-symbol (sym ffi-type)
  ;; ffi--dlsym returns a POINTER to the value of the sym in libjulia.so
  ;; If the symbol is itself a pointer, say of type *t, then dlsym effectively
  ;; returns a pointer of type **t. We use ffi--mem-ref here to dereference
  ;; the returned pointer immediately.
  ;; TODO: Is a simple setq the best option here?
  `(setq ,sym
         (ffi--mem-ref
          (ffi--dlsym
           ,(libjulia-under-to-hyphen (symbol-name sym)) (libjulia.so))
          ,ffi-type)))

;; TODO: there's likely a better datastructure for this...
;; TODO: there are boxer for voidpointer, ssavevalue, slotnumber
;; TODO: there's also an unboxer for voidpointer
(defvar libjulia-primitive-type-map
  '((:julia-type "Bool"    :ffi-type :bool)
    (:julia-type "Int8"    :ffi-type :int8)
    (:julia-type "UInt8"   :ffi-type :uint8)
    (:julia-type "Int16"   :ffi-type :int16)
    (:julia-type "UInt16"  :ffi-type :uint16)
    (:julia-type "Int32"   :ffi-type :int32)
    (:julia-type "UInt32"  :ffi-type :uint32)
    (:julia-type "Int64"   :ffi-type :int64)
    (:julia-type "UInt64"  :ffi-type :uint64)
    (:julia-type "Int64"   :ffi-type :int64)
    (:julia-type "Float32" :ffi-type :float)
    (:julia-type "Float64" :ffi-type :double)))

(defun libjulia-primitive-convert (from-type-name from-type-key to-type-key)
  (plist-get
   (seq-find
    #'(lambda (type-plist)
        (equal from-type-name (plist-get type-plist from-type-key)))
    libjulia-primitive-type-map)
   to-type-key))

(defun libjulia-primitive-julia-type-p (julia-type)
  (not (null (libjulia-primitive-convert julia-type :julia-type :julia-type))))

(defun libjulia-get-jl-unbox-sym (julia-type)
  (intern (format "jl-unbox-%s" (downcase julia-type))))

(defun libjulia-get-jl-box-sym (julia-type)
  (intern (format "jl-box-%s" (downcase julia-type))))

(defmacro libjulia-dolist-primitive-types (&rest body)
  `(dolist (type-entry libjulia-primitive-type-map)
     (pcase-let ((`(:julia-type ,julia-type  :ffi-type ,ffi-type) type-entry))
       (progn ,@body))))


(defun libjuila-gen-boxers-and-unboxers ()
  (libjulia-dolist-primitive-types
   (eval `(libjulia-bind
           ,(libjulia-get-jl-unbox-sym julia-type)
           (:pointer)
           ,ffi-type))
   (eval `(libjulia-bind
           ,(libjulia-get-jl-box-sym julia-type)
           (,ffi-type)
           :pointer))))

(defun libjulia-primitive-unbox (ptr julia-type)
  (unless (libjulia-primitive-julia-type-p julia-type)
    (error "Cannot unbox non-primitive type."))
  (let* ((unbox-f (libjulia-get-jl-unbox-sym julia-type)))
    (unless (functionp unbox-f)
      (error (format "Failed to lookup autogenerated unbox function %s." unbox-f)))
    (funcall unbox-f ptr)))


(defun libjulia-elisp-str-from-julia (ptr)
  (ffi-get-c-string (jl-string-ptr ptr)))


(defun libjulia-elisp-from-julia (ptr julia-type)
  (pcase julia-type
    ((pred libjulia-primitive-julia-type-p)
     (libjulia-primitive-unbox ptr julia-type))
    ("String"
     (libjulia-elisp-str-from-julia ptr))
    ;; If we can't convert to an Elisp type, return as a raw user-ptr.
    (_ ptr)))


(defun libjulia-eval-str (julia-expr-str)
  (with-ffi-string (julia-expr-c-string julia-expr-str)
    (let* ((ret-val-ptr (jl-eval-string julia-expr-c-string))
           (julia-type (ffi-get-c-string (jl-typeof-str ret-val-ptr))))
      (libjulia-elisp-from-julia ret-val-ptr julia-type))))

(defun libjulia-get-julia-type (julia-code-str)
  (ffi-get-c-string
   (jl-typeof-str
    (with-ffi-string (c-str-ptr julia-code-str)
      (jl-eval-string c-str-ptr)))))


(defun libjulia-primitive-box (val julia-type)
  (unless (libjulia-primitive-julia-type-p julia-type)
    (error "Cannot box non-primitive type."))
  (let* ((box-f (libjulia-get-jl-box-sym julia-type)))
    (unless (functionp box-f)
      (error (format "Failed to lookup autogenerated box function %s." box-f)))
    (funcall box-f val)))


(defun ffi-array-index-ref (array type index)
  (ffi-pointer+ array (* index (ffi--type-size type))))

(defun ffi-set-aref (array type index value)
  (ffi--mem-set
   (ffi-array-index-ref array type index)
   type
   value)
  (unless (equal value (ffi-aref array type index))
    (error (format "Failed to set ffi array %s at index %s." array index))))


(defun libjulia-init ()
  ;; Ugly workaround to being required to load libjulia with RTLD_GLOBAL.
  ;; We load it first via the wrapper, which has a custom dlopen call
  ;; Then, emacs-ffi tries to re-load it via dtld, but it's already
  ;; been loaded with the RTLD_GLOBAL flag from the wrapper.
  ;; Note that ltld docs claim their dlopen shouldn't need RTLD_GLOBAL because
  ;; "back-tracing". This doesn't seem to be true for libjulia...
  (module-load "/home/dan/treemax/.spacemacs.d/layers/treemax-julia/local/libjulia/libjulia-wrapper.so")
  (libjulia--dlopen "/usr/local/lib/libjulia.so")

  (define-ffi-library libjulia.so "libjulia.so")
  (define-ffi-function jl-init "jl_init__threading" :void nil libjulia.so)
  (jl-init)
  (libjuila-gen-boxers-and-unboxers)
  (libjulia-bind jl-string-ptr (:pointer) :pointer)
  (libjulia-bind jl-typeof-str (:pointer) :pointer)
  (libjulia-bind jl-eval-string (:pointer) :pointer))

(libjulia-init)

(provide 'libjulia)
